cmd:
  type: python-venv
  command:
    default: python -u run.py
  path:
    default: ~/.opereto/operetovenv

item_properties:

-   key: debug_mode
    value: false
    type: boolean
    direction: input
    mandatory: true
    help: If checked, the runner runs in debug mode

-   key: pre_task_services
    direction: input
    editor: json
    mandatory: false
    type: json
    value: []
    help: One or more services to run (serially) before the task execution

-   direction: input
    editor: text
    key: docker_image
    mandatory: false
    type: text
    value:
    help: The docker image. If provided, it will be automatically added to the docker command at the end.

-   direction: input
    editor: text
    key: docker_command
    mandatory: true
    type: text
    value:
    help: The docker command to run.

-   editor: json
    key: docker_env_params
    direction: input
    mandatory: false
    type: json
    value: {}
    help: A map of environment key-value strings. If provided, env file is created and added to the command

-   direction: input
    editor: text
    key: test_results_directory
    mandatory: false
    type: text
    value:
    help: The container directory to save the test results. This directory will be mounted by the runner service to local directory on the docker host that the test listener check periodically.

-   key: test_parser_config
    direction: input
    editor: json
    mandatory: false
    type: json
    value:
    help: >
      Test parser service configurations, passing needed input for the selected storage upload service.
      The example below is for using Opereto's "opereto_pytest_results_parser" service (included in the Opereto PyTest Services package)
      Example: {
        "service": "opereto_pytest_results_parser",
        "input": null,
        "title": "Parse pytest results"
      }

-   direction: input
    editor: number
    key: keep_parser_running
    mandatory: true
    type: integer
    value: 60
    help: Keep the parser/listeners running after container stops (in seconds)

-   key: post_task_services
    direction: input
    editor: json
    mandatory: false
    type: json
    value: []
    help: One or more services to run (serially) at the end of the task execution

## output properties
-   direction: output
    editor: hidden
    example: 0
    key: task_exitcode
    mandatory: true
    store: []
    type: integer
    value: 0

-   direction: output
    editor: hidden
    key: task_output
    mandatory: false
    type: json
    value: {}



timeout: 3600
type: action
